#include <SPI.h>
#include <Adafruit_VS1053.h>
#include <SD.h>
#define BREAKOUT_RESET  9      // VS1053 reset pin (output)
#define BREAKOUT_CS     10     // VS1053 chip select pin (output)
#define BREAKOUT_DCS    8      // VS1053 Data/command select pin (output)
#define SHIELD_CS     7      // VS1053 chip select pin (output)
#define SHIELD_DCS    6      // VS1053 Data/command select pin (output)
#define CARDCS 4     // Card chip select pin
#define DREQ 3       // VS1053 Data request, ideally an Interrupt pin
Adafruit_VS1053_FilePlayer musicPlayer =  Adafruit_VS1053_FilePlayer(SHIELD_CS, SHIELD_DCS, DREQ, CARDCS);

int signal001 =  21; //track001 - Power level status. Emergency. 10 minutes of emergency power remaining.
int signal002 =  22; //track002 - Command Center status – offline 
int signal003 =  23; //track003 - Oxygen Status – Emergency
int signal004 =  24; //track004 Temperature status – 55 degrees
int signal005 =  25; //track005  Restart generator to unlock Command Center
int signal006 =  26; //track006  Fill generator fuel tank to power Command Center
int signal007 =  27; //track007  Command Center status - online
int signal008 =  28; //track008  Minimal options avaliable in emergency mode
int signal009 =  29; //track009  Generator fuel tank - 100%
int signal010 =  30; //track010  Generator fuel tank - 75%
int signal011 =  31; //track011  Generator fuel tank - 50%
int signal012 = 32; //track012  Generator fuel tank - 25%
int signal013 = 33; //track013  Generator tank nearly depleted
int signal014 = 34; //track014  Emergency transmission 
int signal015 = 35; //track015  All command center options are now avaliable
int signal016 = 36; //track016  Oxygen tanks - 50%
int signal017 = 37; //track017  emergency  
int signal018 = 38; //track018  Temperature status – 35 degrees
int signal019 = 39; //track019  monitor one avaliable
int signal020 = 40; //track020  monitor two avaliable
int signal021 = 52; // GME START

int ActualSignal001Played;
int ActualSignal002Played;
int ActualSignal003Played;
int ActualSignal004Played;
int ActualSignal005Played;
int ActualSignal006Played;
int ActualSignal007Played;
int ActualSignal008Played;
int ActualSignal009Played;
int ActualSignal010Played;
int ActualSignal011Played;
int ActualSignal012Played;
int ActualSignal013Played;
int ActualSignal014Played;
int ActualSignal015Played;
int ActualSignal016Played;
int ActualSignal017Played;
int ActualSignal018Played;
int ActualSignal019Played;
int ActualSignal020Played;
int ActualSignal021Played;
/*
#define PIN_MONITOR_1   22    These are the inputs coming from the Command Center
#define PIN_MONITOR_2   24
#define PIN_MONITOR_3   26
#define PIN_OXYGEN      28
#define PIN_DOOR        30
#define PIN_LIGH_1      32
#define PIN_LIGH_2      34
#define PIN_LIGH_3      36
#define PIN_LIGH_4      38
#define PIN_CAMERA_1    40
#define PIN_CAMERA_2    42
 */
void setup() {
 
 Serial.begin(9600);
 Serial.println("i'm in Setup");
  pinMode(21, INPUT); //Power level status. Emergency. 10 minutes of emergency power 
  pinMode(22, INPUT); //Command Center status – offline 
  pinMode(23, INPUT); //generator fuel tank restarted
  pinMode(24, INPUT); //Temperature status – 55 degrees
  pinMode(25, INPUT); //Restart generator to unlock Command Center
  pinMode(26, INPUT); //Fill generator fuel tank to power Command Center
  pinMode(27, INPUT); //MASTER FOR UNLOCKING JUMPER PUZZLE :007,008,019,020
  pinMode(28, INPUT); 
  pinMode(29, INPUT); //MASTER FOR UNLOCKING FUEL :009,015
  pinMode(30, INPUT); //Generator fuel tank - 75%
  pinMode(31, INPUT); //Generator fuel tank - 50%
  pinMode(32, INPUT); //Generator fuel tank - 25%
  pinMode(33, INPUT); //Generator tank nearly depleted
  pinMode(34, INPUT); //Emergency transmission 
  pinMode(35, INPUT); //All command center options are now avaliable
  pinMode(36, INPUT); //Oxygen tanks - 50%
  pinMode(37, INPUT); //emergency  
  pinMode(38, INPUT); //Temperature status – 35 degrees
  pinMode(39, INPUT); //monitor one avaliable
  pinMode(40, INPUT); //monitor two avaliable
  pinMode(41, INPUT); //sets the ledPin to be an output
  pinMode(A15, OUTPUT); // GAME START
  pinMode(52, INPUT); // GAME START

  digitalWrite(51, LOW);
  
  if (! musicPlayer.begin())
  { Serial.println(F("Couldn't find VS1053, do you have the right pins defined?"));
     while (1); }
  Serial.println(F("VS1053 found"));
  SD.begin(CARDCS);   
  musicPlayer.setVolume(5,5);
  musicPlayer.sineTest(0x44, 500);
  
  musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT);  // DREQ int 
 musicPlayer.playFullFile("track001.mp3");
   Serial.println ("The Introduction has been played.");
  }
  void loop() {
    Serial.println("i'm in Loop"); 
    int ActualSignal001 = digitalRead(signal001);
    int ActualSignal002 = digitalRead(signal002);
    int ActualSignal003 = digitalRead(signal003);
    
    Serial.print("FUEL FILLED PLAYED: ");
    Serial.println(ActualSignal003);
    

   Serial.print("GENERATOR PLAYED: ");
   Serial.println (ActualSignal002);
    
   
     // ************THIS SECTION IS FOR PLAYING MUSIC******************** //
   
     //if (ActualSignal001 == 1 && ActualSignal001Played <= 0 ) {  //Track 001 - Power level status. Emergency. 10 minutes of emergency power 
      
       // ActualSignal001Played ++ ; }

     if (ActualSignal002 == 1 && ActualSignal002Played <= 0 ) {  //track002 - Command Center status – offline  
        musicPlayer.playFullFile("track002.mp3");
        ActualSignal002Played ++ ; }

     if (ActualSignal003 == 1 && ActualSignal003Played <= 0 ) {  //track003 - Oxygen Status – Emergency
        musicPlayer.playFullFile("track003.mp3");
        digitalWrite(A15, HIGH);
        ActualSignal003Played ++ ; }

         }
