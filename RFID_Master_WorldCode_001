
#include "pitches.h"



const int button1 = 2; //declaring the pin for each button
const int button2 = 3; 
const int button3 = 4;     
const int button4 = 5; 
const int button5 = 6;     
const int button6 = 7; 
const int relay = A5;

const int led1 =  13; //declaring the pin for each led
const int led2 =  12;
const int led3 =  11;
const int led4 =  10;
const int led5 =  9;
const int led6 =  8;

int ledState1 = 0; //holds whether or not a button has been pressed yet 
int ledState2 = 0; //gets reset when all six buttons are pressed
int ledState3 = 0;  
int ledState4 = 0;  
int ledState5 = 0;  
int ledState6 = 0;  
int sound = A4;

int buttonsPressed = 0; //number of button 

int pressedButtons[] = {0,0,0,0,0,0}; //records order of button 

const int correctOrder[] = {2,3,4,1,5,6}; // correct order of buttons 
                                          // CHANGE THIS TO CHANGE ORDER
                                          // OF BUTTONS

  int melody[] = {
  NOTE_G6, NOTE_FS6, NOTE_DS6, NOTE_A5, NOTE_GS5, NOTE_E6, NOTE_GS6, NOTE_C7
};

int melodyWrong[] = {
  NOTE_G2, NOTE_G2, NOTE_G2, 
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  7, 7, 7, 7, 7, 7, 7, 7 
};

int noteDurationsWrong[] = {
  1, 1, 1, 
};



void setup() {
  // initialize the LED pin as an output:
  pinMode(led1, OUTPUT); 
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);
  pinMode(led5, OUTPUT);
  pinMode(led6, OUTPUT);
  pinMode(relay,OUTPUT);
  
  

  // initialize the pushbutton pin as an input:
  pinMode(button1, INPUT);  
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);  
  pinMode(button4, INPUT); 
  pinMode(button5, INPUT);  
  pinMode(button6, INPUT); 
  digitalWrite(relay, HIGH);
 



  
   Serial.begin(9200);
}

void loop(){


  if (digitalRead(button1) == HIGH) { //If the button is pressed 
    if (ledState1 == 0){                //Check if the button has been pressed / the led is on
      digitalWrite(led1, HIGH);     // turn on led
      Serial.write("Paris");
      pressedButtons[buttonsPressed] = 1; //record button presss
      buttonsPressed++;                   // update number of buttons pressed
      ledState1 = 1;                      //record led state
    }
  }
  if (digitalRead(button2) == HIGH) {     
    // turn LED on:    
    if (ledState2 == 0){
      digitalWrite(led2, HIGH);
      Serial.write("China");
      pressedButtons[buttonsPressed] = 2;
      buttonsPressed++;
      ledState2 = 1;
    }
  } 
  if (digitalRead(button3) == HIGH) {     
    // turn LED on:    
    if (ledState3 == 0){
      digitalWrite(led3, HIGH);
      Serial.write("Eygpt");
      pressedButtons[buttonsPressed] = 3;
      buttonsPressed++;
      ledState3 = 1;
    }
  } 
  if (digitalRead(button4) == HIGH) {     
    // turn LED on:    
    if (ledState4 == 0){
      digitalWrite(led4, HIGH);
      Serial.write("Russia");
      pressedButtons[buttonsPressed] = 4;
      buttonsPressed++;
      ledState4 = 1;
    }
  } 
  if (digitalRead(button5) == HIGH) {     
    // turn LED on:    
    if (ledState5 == 0){
      digitalWrite(led5, HIGH);
      Serial.write("Taj");
      pressedButtons[buttonsPressed] = 5;
      buttonsPressed++;
      ledState5 = 1;
    }
  } 
  if (digitalRead(button6) == HIGH) {     
    // turn LED on:    
    if (ledState6 == 0){
      digitalWrite(led6, HIGH);
      Serial.write("Petra");
      pressedButtons[buttonsPressed] = 6;
      buttonsPressed++;
      ledState6 = 1;
    }
  } 
  
  
  
  
  
  
  if (buttonsPressed == 6){ //Once all six buttons are pressed
    boolean isCodeCorrect = true;  //Check if they are in 
    for (int y = 0; y < 6; y++){          //the correct order
      Serial.println(pressedButtons[y]);
      if (pressedButtons[y] != correctOrder[y]){
        isCodeCorrect = false;
      }      
    }
    if (isCodeCorrect){ // IF CORRECT 
      for (int x = 0; x < 5; x++){// DO THIS
        
        Serial.write("correct");
        for (int thisNote = 0; thisNote < 8; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(A4, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(A4);
        digitalWrite(A5, LOW);
        delay(1000);
        digitalWrite(A5, HIGH);
        }
        
      }
      
    }
    else { // IF INCORRECT 
      for (int x = 0; x < 10; x++){// DO THIS
        digitalWrite(led1, HIGH);
        delay(50); 
        digitalWrite(led2, HIGH);
        delay(50);
        digitalWrite(led3, HIGH);
        delay(50);
        digitalWrite(led4, HIGH);
        delay(50);
        digitalWrite(led5, HIGH);
        delay(50);
        digitalWrite(led6, HIGH);
        delay(50);
        digitalWrite(led1, LOW);
        delay(50); 
        digitalWrite(led2, LOW);
        delay(50);
        digitalWrite(led3, LOW);
        delay(50);
        digitalWrite(led4, LOW);
        delay(50);
        digitalWrite(led5, LOW);
        delay(50);
        digitalWrite(led6, LOW);

        for (int thisNote = 0; thisNote < 3; thisNote++) {

    
    int noteDurationWrong = 1000 / noteDurationsWrong[thisNote];
    tone(A4, melodyWrong[thisNote], noteDurationWrong);
    int pauseBetweenNotes = noteDurationWrong * 1.30;
    delay(pauseBetweenNotes);
  
    noTone(A4);
      }
      }
      
    }
    digitalWrite(led1, LOW); //TURN LEDS BACK OFF
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    digitalWrite(led4, LOW);
    digitalWrite(led5, LOW);
    digitalWrite(led6, LOW);
    
    ledState1 = 0;           //RESET LEDS / BUTTON PRESSES
    ledState2 = 0;  
    ledState3 = 0;  
    ledState4 = 0;  
    ledState5 = 0;  
    ledState6 = 0;  
    
    buttonsPressed = 0;
  }
}


*********************************************************************************************************************
THIS IS THE NEW CODE UNTIL I FIGURE OUT A BETTER WAY TO DO IT
***********************************************************************************************************************



//declaring the pin for each button
const int button1 = 36;  //SWORD - These are the INPUTs from RFIS sensors.
const int button2 = 38;  //AXE
const int button3 = 40; //SPEAR
const int button4 = 42; //HAMMER
const int button5 = 44; //ARROW
const int button6 = 46; //SHIELD
const int wrong = 48; //LIGHTS FOR WRONG ANSWER
const int correct = 50; //LIGHTS FOR CORRECT ANSWER


//declaring the pin for each led
const int led1 =  22;  //SWORD
const int led2 =  24;  //AXE
const int led3 =  26;  //SPEAR
const int led4 =  28;  //HAMMER
const int led5 =  30;  //ARROW
const int led6 =  32;  //SHIELD

int ledState1 = 0; //holds whether or not a button has been pressed yet
int ledState2 = 0; //gets reset when all six buttons are pressed
int ledState3 = 0;
int ledState4 = 0;
int ledState5 = 0;
int ledState6 = 0;

int buttonsPressed = 0; //number of button
int pressedButtons[] = {0, 0, 0, 0, 0, 0}; //records order of button

const int correctOrder[] = {2, 3, 4, 5, 6, 1}; // correct order of buttons
// CHANGE THIS TO CHANGE ORDER
// OF BUTTONS



void setup() {
  Serial.begin(9600);
  // initialize the LED pin as an output:
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);
  pinMode(led5, OUTPUT);
  pinMode(led6, OUTPUT);
  
  pinMode(wrong, OUTPUT);
  pinMode(correct, OUTPUT);
  //  pinMode(relay,OUTPUT);

  // initialize the pushbutton pin as an input:
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(button4, INPUT);
  pinMode(button5, INPUT);
  pinMode(button6, INPUT);
  // digitalWrite(relay, HIGH);

  digitalWrite (led1, HIGH);
  digitalWrite (led2, HIGH);
  digitalWrite (led3, HIGH);
  digitalWrite (led4, HIGH);
  digitalWrite (led5, HIGH);
  digitalWrite (led6, HIGH);
  digitalWrite (wrong, HIGH);
  digitalWrite (correct, HIGH);
}

void loop() {

  int fail = 0;

  if (fail >= 1) 
  {digitalWrite(led1, HIGH); //TURN LEDS BACK OFF
    digitalWrite(led2, HIGH);
    digitalWrite(led3, HIGH);
    digitalWrite(led4, HIGH);
    digitalWrite(led5, HIGH);
    digitalWrite(led6, HIGH);

    ledState1 = 0;           //RESET LEDS / BUTTON PRESSES
    ledState2 = 0;
    ledState3 = 0;
    ledState4 = 0;
    ledState5 = 0;
    ledState6 = 0;

    buttonsPressed = 0;
    delay(4000);
  }
  digitalWrite (correct, HIGH);
  int buttonPin1Value = digitalRead(button1);
  Serial.print("button1: ");
  Serial.println(buttonPin1Value);
  delay(500);

  int buttonPin2Value = digitalRead(button2);
  Serial.print("button2: ");
  Serial.println(buttonPin2Value);
  delay(500);

  int buttonPin3Value = digitalRead(button3);
  Serial.print("button3: ");
  Serial.println(buttonPin3Value);
  delay(500);

  int buttonPin4Value = digitalRead(button4);
  Serial.print("button4: ");
  Serial.println(buttonPin4Value);
  delay(500);

  int buttonPin5Value = digitalRead(button5);
  Serial.print("button5: ");
  Serial.println(buttonPin5Value);
  delay(500);

  int buttonPin6Value = digitalRead(button6);
  Serial.print("button6: ");
  Serial.println(buttonPin6Value);
  delay(500);
  
  if (digitalRead(button1) == HIGH) { //If the button is pressed
    if (ledState1 == 0) {               //Check if the button has been pressed / the led is on
      digitalWrite(led1, LOW);     // turn on led
      Serial.write("SWORD");
      pressedButtons[buttonsPressed] = 1; //record button presss
      buttonsPressed++;                   // update number of buttons pressed
      ledState1 = 1;                      //record led state
    }
  }
  if (digitalRead(button2) == HIGH) {
    // turn LED on:
    if (ledState2 == 0) {
      digitalWrite(led2, LOW);
      Serial.write("AXE");
      pressedButtons[buttonsPressed] = 2;
      buttonsPressed++;
      ledState2 = 1;
    }
  }
  if (digitalRead(button3) == HIGH) {
    // turn LED on:
    if (ledState3 == 0) {
      digitalWrite(led3, LOW);
      Serial.write("SPEAR");
      pressedButtons[buttonsPressed] = 3;
      buttonsPressed++;
      ledState3 = 1;
    }
  }
  if (digitalRead(button4) == HIGH) {
    // turn LED on:
    if (ledState4 == 0) {
      digitalWrite(led4, LOW);
      Serial.write("HAMMER");
      pressedButtons[buttonsPressed] = 4;
      buttonsPressed++;
      ledState4 = 1;
    }
  }
  if (digitalRead(button5) == HIGH) {
    // turn LED on:
    if (ledState5 == 0) {
      digitalWrite(led5, LOW);
      Serial.write("ARROW");
      pressedButtons[buttonsPressed] = 5;
      buttonsPressed++;
      ledState5 = 1;
    }
  }
  if (digitalRead(button6) == HIGH) {
    // turn LED on:
    if (ledState6 == 0) {
      digitalWrite(led6, LOW);
      Serial.write("SHIELD");
      pressedButtons[buttonsPressed] = 6;
      buttonsPressed++;
      ledState6 = 1;
    }
  }

  if (buttonsPressed == 6) { //Once all six buttons are pressed
    boolean isCodeCorrect = true;  //Check if they are in
    for (int y = 0; y < 6; y++) {         //the correct order
      Serial.println(pressedButtons[y]);
      if (pressedButtons[y] != correctOrder[y]) {
        isCodeCorrect = false;
      }
    }
    if (isCodeCorrect) { // IF CORRECT
      for (int x = 0; x < 10; x++) { // DO THIS

        Serial.write("correct");
        digitalWrite(correct, LOW);

      }
    }
    else { // IF INCORRECT

      for (int x = 0; x < 10; x++) { // DO THIS

        digitalWrite(wrong, LOW);
        digitalWrite(led1, LOW);
        delay(50);
        digitalWrite(led2, LOW);
        delay(50);
        digitalWrite(led3, LOW);
        delay(50);
        digitalWrite(led4, LOW);
        delay(50);
        digitalWrite(led5, LOW);
        delay(50);
        digitalWrite(led6, LOW);
        delay(50);
        digitalWrite(led1, HIGH);
        delay(50);
        digitalWrite(led2, HIGH);
        delay(50);
        digitalWrite(led3, HIGH);
        delay(50);
        digitalWrite(led4, HIGH);
        delay(50);
        digitalWrite(led5, HIGH);
        delay(50);
        digitalWrite(led6, HIGH);
        delay(50);
        digitalWrite(wrong, HIGH);

       fail ++;
      }

    }
    digitalWrite(led1, HIGH); //TURN LEDS BACK OFF
    digitalWrite(led2, HIGH);
    digitalWrite(led3, HIGH);
    digitalWrite(led4, HIGH);
    digitalWrite(led5, HIGH);
    digitalWrite(led6, HIGH);

    ledState1 = 0;           //RESET LEDS / BUTTON PRESSES
    ledState2 = 0;
    ledState3 = 0;
    ledState4 = 0;
    ledState5 = 0;
    ledState6 = 0;

    buttonsPressed = 0;
    delay(4000);

  }
}
